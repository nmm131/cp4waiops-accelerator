

# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Patching some stuff
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************
    


        
# --------------------------------------------------------------------------------------------------------------------------------------
# Adapt Slack Welcome Message
# --------------------------------------------------------------------------------------------------------------------------------------
- name: CONFIG -             ðŸ•¦ Wait for Slack Pod Ready
  shell: oc wait --namespace="{{ WAIOPS_NAMESPACE }}" --for=condition=Ready pods $(oc get po -n "{{ WAIOPS_NAMESPACE }}"|grep "aimanager-aio-chatops-slack-integrator"|awk '{print$1}') --timeout=600s
  ignore_errors: yes  
  register: slack_ready


# - name: PLATFORM -           ðŸ©¹ Patch AutomationUIConfig Certificates
#   shell: |
#     oc project {{ WAIOPS_NAMESPACE }}
#     AUTO_UI_INSTANCE=$(oc get AutomationUIConfig -n {{ WAIOPS_NAMESPACE }} --no-headers -o custom-columns=":metadata.name")
#     IAF_STORAGE=$(oc get AutomationUIConfig -n {{ WAIOPS_NAMESPACE }} -o jsonpath='{ .items[*].spec.storage.class }')
#     oc delete -n {{ WAIOPS_NAMESPACE }} AutomationUIConfig $AUTO_UI_INSTANCE

#     cat <<EOF | oc apply -f -
#     apiVersion: core.automation.ibm.com/v1beta1
#     kind: AutomationUIConfig
#     metadata:
#       name: $AUTO_UI_INSTANCE
#       namespace: {{ WAIOPS_NAMESPACE }}
#     spec:
#       description: AutomationUIConfig for cp4waiops
#       license:
#         accept: true
#       version: v1.0
#       storage:
#         class: $IAF_STORAGE
#       tls:
#         caSecret:
#           key: ca.crt
#           secretName: external-tls-secret
#         certificateSecret:
#           secretName: external-tls-secret
#     EOF

#   register: certificate_patch
#   ignore_errors: yes


# - name: PLATFORM -           ðŸ©¹ Patch Ingress Certificates
#   shell: |
#     oc project {{ WAIOPS_NAMESPACE }}
#     ingress_pod=$(oc get secrets -n openshift-ingress | grep tls | grep -v router-metrics-certs-default | awk '{print $1}')
#     oc get secret -n openshift-ingress -o 'go-template={{index .data "tls.crt"}}' ${ingress_pod} | base64 -d > cert.crt
#     oc get secret -n openshift-ingress -o 'go-template={{index .data "tls.key"}}' ${ingress_pod} | base64 -d > cert.key
#     oc get secret -n {{ WAIOPS_NAMESPACE }} external-tls-secret -o 'go-template={{index .data "ca.crt"}}'| base64 -d > ca.crt
#     oc get secret -n {{ WAIOPS_NAMESPACE }} external-tls-secret -o yaml > external-tls-secret$(date +%Y-%m-%dT%H:%M:%S).yaml
#     oc delete secret -n {{ WAIOPS_NAMESPACE }} external-tls-secret
#     oc create secret generic -n {{ WAIOPS_NAMESPACE }} external-tls-secret --from-file=ca.crt=ca.crt --from-file=cert.crt=cert.crt --from-file=cert.key=cert.key --dry-run=client -o yaml | oc apply -f -
#     REPLICAS=2
#     oc scale Deployment/ibm-nginx --replicas=0
#     sleep 3
#     oc scale Deployment/ibm-nginx --replicas=${REPLICAS}
#     # rm cert.crt
#     # rm cert.key
#     # rm ca.crt
#     # rm external-tls-secret
#     oc delete pod $(oc get po -n {{ WAIOPS_NAMESPACE }}|grep slack|awk '{print$1}') -n {{ WAIOPS_NAMESPACE }} --grace-period 0 --force
#   register: certificate_patch
#   ignore_errors: yes

  
- name: CONFIG -             ðŸ©¹ Patch Slack Welcome Message
  shell: oc set env -n {{ WAIOPS_NAMESPACE }} deployment/$(oc get deploy -n {{ WAIOPS_NAMESPACE }} -l app.kubernetes.io/component=chatops-slack-integrator -o jsonpath='{.items[*].metadata.name }') SLACK_WELCOME_COMMAND_NAME=/welcome
  ignore_errors: yes


