
# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Train RobotShop Logs
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************

# --------------------------------------------------------------------------------------------------------------------------------------
# Train RobotShop Logs
# --------------------------------------------------------------------------------------------------------------------------------------
- name: RSLOGS -             üöÄ Check kafkacat executable
  shell: |
    if [ -x "$(command -v kafkacat)" ]; then
          echo "kafkacat"
    else
          if [ -x "$(command -v kcat)" ]; then
          export KAFKACAT_EXE=kcat
                echo "kcat"
          else
                echo "  ‚ùó ERROR: kafkacat is not installed."
                echo "  ‚ùå Aborting..."
                exit 1
          fi
    fi
  register: kafkacat_exe



- name: RSLOGS -             üöÄ Get LOGS_TOPIC
  shell: |
    echo $(oc get kafkatopics -n {{ WAIOPS_NAMESPACE }}      | grep logs-{{ LOG_TYPE }}     | awk '{print $1;}')  
  register: LOGS_TOPIC


- name: RSLOGS -             üöÄ Get LOGS_TOPIC_COUNT
  shell: |
    echo $(echo {{ LOGS_TOPIC }} | wc -w)
  register: LOGS_TOPIC_COUNT


- name: RSLOGS -             üöÄ Get KAFKA_PASSWORD
  shell: |
    echo "$(oc get secret token -n {{ WAIOPS_NAMESPACE }} --template=\{\{.data.password\}\}|base64 --decode)"
  register: KAFKA_PASSWORD


- name: RSLOGS -             üöÄ Get KAFKA_BROKER
  shell: |
    echo $(oc get routes strimzi-cluster-kafka-bootstrap -n {{ WAIOPS_NAMESPACE }}      -o=jsonpath='{.status.ingress[0].host}{"\n"}'):443
  register: KAFKA_BROKER


- name: RSLOGS -             üöÄ Get DATE_FORMAT
  shell: |
    case $LOG_TYPE in
      elk) export DATE_FORMAT="+%Y-%m-%dT%H:%M:%S.000Z";;
      humio) export DATE_FORMAT="+%s000";;
      *) export DATE_FORMAT="+%s000";;
    esac
    echo $DATE_FORMAT
  register: DATE_FORMAT


- name: RSLOGS -             üöÄ Get WORKING_DIR_LOGS
  shell: |
    echo "./training/TRAINING_FILES/KAFKA/{{ APP_NAME }}/logs"
  register: WORKING_DIR_LOGS


- name: RSLOGS -             üöÄ Get WORKING_DIR_EVENTS
  shell: |
    echo "./training/TRAINING_FILES/KAFKA/{{ APP_NAME }}/events"
  register: WORKING_DIR_EVENTS


- name: RSLOGS -             üöÄ Unzip Training Data
  shell: |
    cd {{ WORKING_DIR_LOGS.stdout_lines[0] }}
    unzip ./data-log-training.zip
    cd -
  register: WORKING_DIR_UNZIP


- name: RSLOGS -             üöÄ Load Logs (this can take up to one hour)
  shell: |
    export KAFKACAT_EXE={{ kafkacat_exe.stdout_lines[0] }}
    echo "KAFKACAT EXE:$KAFKACAT_EXE"
    echo {{ WORKING_DIR_LOGS.stdout_lines[0] }}
    for actFile in $(ls -1 {{ WORKING_DIR_LOGS.stdout_lines[0] }} | grep "json"); 
    do 

    #--------------------------------------------------------------------------------------------------------------------------------------------
    #  Prepare the Log Data
    #--------------------------------------------------------------------------------------------------------------------------------------------

          echo "***************************************************************************************************************************************************"
          echo "  üõ†Ô∏è  Preparing Data for file $actFile"
          echo "***************************************************************************************************************************************************"


          #--------------------------------------------------------------------------------------------------------------------------------------------
          echo  "Create file and structure in /tmp"
          #--------------------------------------------------------------------------------------------------------------------------------------------
          mkdir /tmp/training-logs/
          rm /tmp/training-logs/x*
          cp {{ WORKING_DIR_LOGS.stdout_lines[0] }}/$actFile /tmp/training-logs/
          cd /tmp/training-logs/

          #--------------------------------------------------------------------------------------------------------------------------------------------
          echo "Split the files in 1500 line chunks for kafkacat"
          #--------------------------------------------------------------------------------------------------------------------------------------------
          echo "    üî® Splitting"
          split -l 1500 $actFile
          export NUM_FILES=$(ls | wc -l)
          rm $actFile
          cd -
          echo "      ‚úÖ OK"


          #--------------------------------------------------------------------------------------------------------------------------------------------
          echo  "Get the cert for kafkacat"
          #--------------------------------------------------------------------------------------------------------------------------------------------
          oc project {{ WAIOPS_NAMESPACE }}

          echo "***************************************************************************************************************************************************"
          echo "ü•á Getting Certs"
          echo "***************************************************************************************************************************************************"
          oc extract secret/strimzi-cluster-cluster-ca-cert -n {{ WAIOPS_NAMESPACE }} --keys=ca.crt
          echo "      ‚úÖ OK"
          echo "***************************************************************************************************************************************************"

          echo $("pwd")
          echo "***************************************************************************************************************************************************"
          echo $("ls")
          echo "***************************************************************************************************************************************************"
          echo $("ls /tmp/training-logs/")

          #--------------------------------------------------------------------------------------------------------------------------------------------
          #  Inject the logs
          #--------------------------------------------------------------------------------------------------------------------------------------------
          echo "***************************************************************************************************************************************************"
          echo "üåè  Injecting Logs from File: ${actFile}" 
          echo "     Quit with Ctrl-Z"
          echo "***************************************************************************************************************************************************"
          ACT_COUNT=0
          for FILE in /tmp/training-logs/*; do 
              if [[ $FILE =~ "x"  ]]; then
                  ACT_COUNT=`expr $ACT_COUNT + 1`
                  echo "Injecting file ($ACT_COUNT/$(($NUM_FILES-1))) - $FILE"
                  ${KAFKACAT_EXE} -v -X security.protocol=SASL_SSL -X ssl.ca.location=./ca.crt -X sasl.mechanisms=SCRAM-SHA-512  -X sasl.username=token -X sasl.password={{ KAFKA_PASSWORD.stdout_lines[0] }} -b {{ KAFKA_BROKER.stdout_lines[0] }} -P -t {{ LOGS_TOPIC.stdout_lines[0] }} -l $FILE                 
                  echo "      ‚úÖ OK"
              fi
          done
          rm /tmp/training-logs/x*
    done
  register: LOAD


